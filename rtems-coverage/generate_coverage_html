#! /bin/sh
#
#  Combine the various reports into a single html file
#
#  $Id$
#

vfile=`dirname $0`/VERSIONS-COVERAGE
if [ ! -r ${vfile} ] ; then
  echo VERSIONS-COVERAGE file not found
  exit 1
fi

source ${vfile}

if [ ! -d ${BASEDIR} ] ; then
  echo Have you set the BASEDIR in VERSIONS correctly?
  exit 1
fi

progname=${0##*/}        # fast basename hack for ksh, bash

USAGE=\
"usage: $progname [ -opts ]
        -v         -- verbose (default=no)
        -r VERSION -- RTEMS Version (default=CVS)
"

#   log an error to stderr
prerr()
{
    echo "$*" >&2
}

fatal() {
    prerr "$USAGE"
    [ "$1" ] && (prerr ; prerr $*);
    exit 1
}

toggle()
{
  case $1 in
    no)  echo "yes" ;;
    yes) echo "no" ;;
    *)   fatal "Unknown value to toggle ($1)" ;;
  esac
}

verbose="no"
RTEMS_VERSION="CVS Head"

while getopts vr: OPT
do
    case "$OPT" in
        r) RTEMS_VERSION="${OPTARG}";;
        v) verbose=`toggle ${verbose}` ;;
        *) fatal;;
    esac
done

shiftcount=`expr $OPTIND - 1`
shift $shiftcount

if [ $# -ne 1 ] ; then
  fatal Usage: $0 directory
fi

if [ ! -d ${1} ] ; then
  fatal ${1} is not a directory
fi


print_doc_top()
{
cat <<EOF
<HTML>
<HEAD>
<TITLE>RTEMS 
EOF

echo ${RTEMS_VERSION}

cat <<EOF
Coverage Reports</TITLE>
<meta http-equiv="Content-Language" content="English" />
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<link rel="stylesheet" type="text/css" href="rtems/style.css" media="screen" />
<div class="heading">
<div class="heading-title">RTEMS
EOF

echo ${RTEMS_VERSION}" Coverage Results</div>"
echo "<div class=\"datetime\">"`date`"</div>"

cat << EOF
<div class="info">For more information on coverage analysis in general visit
<a href="http://www.rtems.org/wiki/index.php/Coverage_Analysis_Theory">
Coverage Analysis Theory</a>.  For information on how the RTEMS Project
views coverage analysis, visit
<a href="http://www.rtems.org/wiki/index.php/RTEMS_Coverage_Analysis">
RTEMS Coverage Testing</a>.
</div>
</div>
</HEAD>
<body>
<br>
<br>
<table class="stats-table" $cellspacing="1" cellpadding="2">
EOF
}

print_doc_bottom()
{
cat <<EOF
</table>
</body>
EOF
}

print_heading()
{
  echo "<th>"${*}"</th>"
}

doit()
{
  print_doc_top

  # now cat rows
  for bsp in ${BSPs} 
  do
    cpu=`grep "^Target" ${bsp}-*/configuration.txt | \
          sed -e 's/^.*Target: *//' | sort -u | cut -d'-' -f1`
    echo "<table class=\"stats-table\" cellspacing=\"1\" cellpadding=\"2\">"
    echo "<tr class=\"stats-table-target\"><td colspan=\"10\"> <strong>" \
          ${cpu}/${bsp} "</strong></td></tr>"
    echo "<tr class=\"stats-table-top\">"
    ### generate header
    print_heading Day
    print_heading Time
    print_heading Optimization
    print_heading POSIX Enabled
    print_heading Developmental Enabled
    print_heading Uncovered Ranges
    # skip Uncovered Percentage
    print_heading Covered Percentage
    print_heading Uncovered Bytes
    print_heading Total Bytes
    print_heading Results

    #cat ${bsp}-*-*-*/row.html | sed -e 's/<TD>/<TD><CENTER>/g' \
    #   -e 's/<\/TD>/<\/CENTER><\/TD>/g'

    # 1   2      3      4
    #bsp-opt-yyyymmdd-hhmm.tar.bz2
    # sort 1,2 alphabetically, sort 3,4 reverse "version"
    ls -1 ${bsp}-*-*-*/row.html | sort -t -  -k 1,2 -k 3,4Vr | while read row
    do
     sed \
      -e '2,2s/<TD>\(20[0-9][0-9]\)\([0-1][0-9]\)\([0-9][0-9]\)/<TD>\1-\2-\3/' \
      -e '1,1s/<TR>/<tr class="stats-table-row">/' \
      -e '7,7s/<TD>0/<td class="stats-target-good">0/' \
      -e '9,9s/<TD>100/<td class="stats-target-good">100/' \
      -e '10,10s/<TD>0/<td class="stats-target-good">0/' \
      -e 's/<[tT][dD]/<td align="center"/' \
      -e '8d' \
      <$row
    done
  done
  print_doc_bottom
}

cd $1

if [ `ls -1 *.tar.bz2 2>/dev/null | wc -l` -eq 0 ]; then
  echo "No tarballs.  Is $1 really a coverage publishing directory?"
  exit 1
fi

for d in `ls -1 *.tar.bz2 | sed -e 's/.tar.bz2$//'`
do
  if [ ! -d ${d} ] ; then
    tar xjf ${d}.tar.bz2
  fi
done

if [ ! -d rtems ] ; then
  mkdir rtems
fi

cp ${COVBASE}/style.css rtems/style.css

genBSPList()
{
  find * -maxdepth 1 -type d | cut -d'-' -f1 | uniq | grep -v rtems | \
    while read bsp
    do
      cpu=`grep ^Target ${bsp}-*/configuration.txt | tail -1 | \
        sed -e 's/^.*://' -e 's/^.*: *\([a-z]*\)-rtems.*$/\1/'`
      echo ${cpu}/${bsp}
    done | sort -t / -k 1 -k 2 | cut -d'/' -f2
    # sort cpu,bsp alphabetically
}

cleanup()
{
  for bsp in ${BSPs} 
  do
    count=`ls -1 ${bsp}*.tar.bz2 | wc -l`
    if [ ${count} -gt 20 ] ; then
      echo ${bsp} has ${count} entries.. cleaning it
      ls -1 ${bsp}-*.tar.bz2 |  sort -t - -k 3 -k 2 -r | sed -e '1,20d' | \
      while read f
      do
        dir=`echo ${f} | sed -e 's/.tar.bz2$//'`
        rm -rf ${f} ${dir}
      done
    fi
   
  done
}

#BSPs=`find * -maxdepth 1 -type d | cut -d'-' -f1 | uniq | grep -v rtems`
BSPs=`genBSPList`

cleanup

doit >index.html
exit 0
