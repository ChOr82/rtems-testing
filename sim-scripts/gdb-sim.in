#! /bin/sh
#
#  Framework script tailored for the @CPU@/@BSP@
#
#  NOTE: If the does not have the name of a specific CPU/BSP pair, then
#        this is the source file.  If it does have specific CPU/BSP pair,
#        then this is generated output and should NOT be edited.
#
#  $Id$
#

trap "test_exit 1" 1 2 3 13 14 15

progname=${0##*/}        # fast basename hack for ksh, bash
rtemsVersion=`echo ${progname} | sed -e 's/@BSP@-//' -e 's/gdb-//'`
GDB=@CPU_TARGET@-rtems${rtemsVersion}-gdb

test_exit()
{
  exit_code=$1
  rm -f @BSP@-cmds
  exit $exit_code
}

if [ $# -eq 0 ] ; then
  echo "No arguments .. no executable specified"
  exit 1 
fi

### Set BSP defaults.  If BSP does not have default, it will override
bspGeneratesGDBCommands="no"
bspGeneratesDeviceTree="no"

###################################################################
###################################################################
###################################################################
##INSERT BSP SUPPORT HERE
###################################################################
###################################################################
###################################################################

## Some BSPs must generate device trees to provide to the simulator
if [ ${bspGeneratesDeviceTree} = "yes" ] ; then
  TREE_FILE=@BSP@_tree.${LOGNAME}
  bspGenerateDeviceTree ${baseToRun} >${TREE_FILE}
fi

### generate bsp specific load command
if [ ${bspGeneratesGDBCommands} = "no" ] ; then
  cat <<EOF
tar sim 
load
EOF
else
  bspGenerateGDBCommands 
fi >@BSP@-cmds

###  Add CPU specific commands
case @CPU@ in
  powerpc) echo  "b C_exception_handler" ;;
  *)       ;;
esac >>@BSP@-cmds

###  Add generic commands which break on known bad places
cat >>@BSP@-cmds <<EOF
b _Internal_error_Occurred
b rtems_fatal_error_occurred
b __assert
printf "Use run to start the RTEMS application\\n"
EOF

${GDB} --command=@BSP@-cmds $*

if [ ${bspGeneratesDeviceTree} = "yes" ] ; then
  rm -f @BSP@_tree.${LOGNAME}
fi
test_exit $?
